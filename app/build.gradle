apply plugin: 'com.android.application'
apply plugin: 'android-aspectjx'
apply from: '../config.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        // 无痛修改包名：https://www.jianshu.com/p/17327e191d2e
        applicationId "com.fastproject.demo"
        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resConfig 'xxhdpi'


        // 混淆配置
        proguardFiles 'proguard-sdk.pro', 'proguard-app.pro'
    }

    // Apk 签名 keytool -list -v -keystore 签名文件地址
    signingConfigs {
        config {
            storeFile file("../fastProject.jks")
            storePassword "123456"
            keyAlias "fastProject"
            keyPassword "123456"
        }
    }


    buildTypes {

        debug {
            // 给包名添加后缀
            applicationIdSuffix '.debug'
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
//            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            //buildConfigField是自定义的参数配置 通过gradle编译生成BuildConfig文件
            // 日志打印开关
            buildConfigField('boolean', 'LOG_ENABLE', 'true')
            // 测试服务器的主机地址
            buildConfigField('String', 'HOST_URL', '"https://www.test.baidu.com/"')
            // 设置清单占位符
            manifestPlaceholders = ['app_name': '快速集成Debug']
            // 调试模式下只保留一种架构的 so 库，提升打包速度
            ndk {
                abiFilters 'armeabi-v7a'
            }
        }

        preview.initWith(debug)
        preview {
            applicationIdSuffix ''
            // 设置清单占位符
            manifestPlaceholders = ['app_name': '快速集成Preview']
        }


        release {
            // 调试模式开关
            debuggable false
            jniDebuggable false
            // 压缩对齐开关
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources true
            // 代码混淆开关
            minifyEnabled true
            // 签名信息配置
            signingConfig signingConfigs.config
            // 日志打印开关
            buildConfigField('boolean', 'LOG_ENABLE', 'false')
            // 正式服务器的主机地址
            buildConfigField('String', 'HOST_URL', '"https://www.baidu.com/"')
            // 设置清单占位符
            manifestPlaceholders = ['app_name': '快速集成']
            // 仅保留两种架构的 so 库，根据 Bugly 统计得出
            ndk {
                // armeabi：万金油架构平台（占用率：0%）
                // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                // arm64-v8a：目前主流架构平台（占用率：95%）
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    packagingOptions {
        // 剔除这个包下的所有文件（不会移除签名信息）
        exclude 'META-INF/*******'
    }

    // AOP 配置（exclude 和 include 二选一）
    aspectjx {
        // 排除一些第三方库的包名（Gson、 LeakCanary 和 AOP 有冲突）
        // exclude 'androidx', 'com.google', 'com.squareup', 'org.apache', 'com.alipay', 'com.taobao', 'versions.9'
        // 只对以下包名做 AOP 处理
        include 'com.fastproject.demo'
        // 否则就会引发冲突，具体表现为：
        // 编译不过去，报错：java.util.zip.ZipException：Cause: zip file is empty
        // 编译能过去，但运行时报错：ClassNotFoundException: Didn't find class on path: DexPathList
    }

    applicationVariants.all { variant ->

        // Apk 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format('MMdd')
            }
            outputFileName += '.apk'
        }
    }

}

dependencies {

    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation 'com.hjq:xxpermissions:9.8'

    // 标题栏框架：https://github.com/getActivity/TitleBar
    implementation 'com.hjq:titlebar:8.2'

    // 吐司框架：https://github.com/getActivity/ToastUtils
    implementation 'com.hjq:toast:8.8'

    // 网络请求框架：https://github.com/getActivity/EasyHttp
    implementation 'com.hjq:http:9.0'
    // OkHttp 框架：https://github.com/square/okhttp
    // noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.12.12'

    // Json 解析框架：https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.6'
    // Gson 解析容错：https://github.com/getActivity/GsonFactory
    implementation 'com.hjq.gson:factory:3.0'

    // AOP 插件库：https://mvnrepository.com/artifact/org.aspectj/aspectjrt
    implementation 'org.aspectj:aspectjrt:1.9.6'

    // 图片加载框架：https://github.com/bumptech/glide
    // 官方使用文档：https://muyangmin.github.io/glide-docs-cn/
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // 沉浸式框架：https://github.com/gyf-dev/ImmersionBar
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'

    // 手势 ImageView：https://github.com/chrisbanes/PhotoView
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'

    // Bugly 异常捕捉：https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20190418140644
    implementation 'com.tencent.bugly:crashreport:3.3.3'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.700'

    // 动画解析库：https://github.com/airbnb/lottie-android
    // 动画资源：https://lottiefiles.com、https://icons8.com/animated-icons
    implementation 'com.airbnb.android:lottie:3.6.1'

    // 刷新框架：https://github.com/scwang90/SmartRefreshLayout
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.3'
    implementation 'com.scwang.smart:refresh-header-material:2.0.3'

    // 日志打印框架：https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // 指示器框架：https://github.com/ongakuer/CircleIndicator
    implementation 'me.relex:circleindicator:2.1.4'

    // 内存泄漏监测框架：https://github.com/square/leakcanary
    // noinspection GradleDependency
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'
    // noinspection GradleDependency
    previewImplementation 'com.squareup.leakcanary:leakcanary-android:2.5'

    // jetPack lifecycle
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    // jetPack alternatively, just ViewModel
    implementation 'android.arch.lifecycle:viewmodel:1.1.1'
    //jetPack alternatively, just LiveData
    implementation 'android.arch.lifecycle:livedata:1.1.1'
    implementation 'in.srain.cube:ultra-ptr:1.0.11'
    implementation 'com.alibaba:fastjson:1.2.35'

    // jetPack Room (use 1.1.0-alpha1 for latest alpha)
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"

}